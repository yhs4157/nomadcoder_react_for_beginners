# 3.0 Understanding State

    - 어려운 방식으로 한번 서술할 것. 
    - count를 올려도 작동하지 않음. 
    -> 랜더링은 처음 한번만 작동하기 때문에. 
    -> function call 때마다 랜더링을 계속해주면 됨. 

    - 쉽게 하는 방법. 
     - 다음 챕터에서 더 설명할 것. 

    - vanilla js vs react js 
     - 개발자 도구를 통해 업데이트되는 부분을 보면 알 수 있음. 
     - vanilla js는 span 전체가 업데이트되는데 반해
     - react js는 숫자 부분만 업데이트된다.

# 3.1 setState part One

    - 문제점 : 데이터 변경 시마다 render을 콜할 것이냐? 
    - React.setState()을 반환은 [value, function]으로 이루어져 있다.
    - 그에 맞추어 const [value, function] = React.setState();로 형성

# 3.2 setState part Two

    - setState()에서 제공되는 함수를 사용하지 않으면 랜더링이 제공되지 않음. 
    - 수는 수정하다. const를 let으로 변경한 뒤, 랜더링은 수동으로 돌려야한다. 
    - 결국 위의 기능을 한 번에 처리하는 것이 setState[1]에 기능. 

# 3.3 Recap
     - 리랜더링과 리프래쉬한다는 것을 잘 알고 있어야함. 
     - 전체가 새로 생성되는 것임. 

# 3.4 State Functions 

    - 예상과 다르게 결과가 나온다면 ? 지금은 헷갈리지 않겠지만 조금 더 길이가 길어지면 
    헷갈릴 수 있음. 
    - current를 바탕으로 값을 계산하는 것. 

# 3.5 Inputs and State

 - unit converter를 제작.
 - for, class같은 경우 javascript언어이기에 htmlFor, className을 사용해야한다. 
 - 그래도 반대로 javascript와 유사한 면이 많기에 사용할 수 있는 기능도 있다. 대표적으로 event 
 event를 발생시키고 나면 발생하는 인수로 주는 argument로 나오는 object 값을 이용하여 값을 변형한다. 

 